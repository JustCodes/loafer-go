// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fake

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	"github.com/justcodes/loafer-go/v2/aws/sns"
)

// NewProducer creates a new instance of Producer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Producer {
	mock := &Producer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Producer is an autogenerated mock type for the Producer type
type Producer struct {
	mock.Mock
}

type Producer_Expecter struct {
	mock *mock.Mock
}

func (_m *Producer) EXPECT() *Producer_Expecter {
	return &Producer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function for the type Producer
func (_mock *Producer) Produce(ctx context.Context, input *sns.PublishInput) (string, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Produce")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sns.PublishInput) (string, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sns.PublishInput) string); ok {
		r0 = returnFunc(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sns.PublishInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Producer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type Producer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sns.PublishInput
func (_e *Producer_Expecter) Produce(ctx interface{}, input interface{}) *Producer_Produce_Call {
	return &Producer_Produce_Call{Call: _e.mock.On("Produce", ctx, input)}
}

func (_c *Producer_Produce_Call) Run(run func(ctx context.Context, input *sns.PublishInput)) *Producer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sns.PublishInput
		if args[1] != nil {
			arg1 = args[1].(*sns.PublishInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Producer_Produce_Call) Return(s string, err error) *Producer_Produce_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *Producer_Produce_Call) RunAndReturn(run func(ctx context.Context, input *sns.PublishInput) (string, error)) *Producer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// ProduceBatch provides a mock function for the type Producer
func (_mock *Producer) ProduceBatch(ctx context.Context, input *sns.PublishBatchInput) (*sns.PublishBatchOutput, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ProduceBatch")
	}

	var r0 *sns.PublishBatchOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sns.PublishBatchInput) (*sns.PublishBatchOutput, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sns.PublishBatchInput) *sns.PublishBatchOutput); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sns.PublishBatchOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sns.PublishBatchInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Producer_ProduceBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProduceBatch'
type Producer_ProduceBatch_Call struct {
	*mock.Call
}

// ProduceBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - input *sns.PublishBatchInput
func (_e *Producer_Expecter) ProduceBatch(ctx interface{}, input interface{}) *Producer_ProduceBatch_Call {
	return &Producer_ProduceBatch_Call{Call: _e.mock.On("ProduceBatch", ctx, input)}
}

func (_c *Producer_ProduceBatch_Call) Run(run func(ctx context.Context, input *sns.PublishBatchInput)) *Producer_ProduceBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sns.PublishBatchInput
		if args[1] != nil {
			arg1 = args[1].(*sns.PublishBatchInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Producer_ProduceBatch_Call) Return(publishBatchOutput *sns.PublishBatchOutput, err error) *Producer_ProduceBatch_Call {
	_c.Call.Return(publishBatchOutput, err)
	return _c
}

func (_c *Producer_ProduceBatch_Call) RunAndReturn(run func(ctx context.Context, input *sns.PublishBatchInput) (*sns.PublishBatchOutput, error)) *Producer_ProduceBatch_Call {
	_c.Call.Return(run)
	return _c
}
