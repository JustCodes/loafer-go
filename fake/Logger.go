// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fake

import (
	mock "github.com/stretchr/testify/mock"
)

// NewLogger creates a new instance of Logger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogger(t interface {
	mock.TestingT
	Cleanup(func())
}) *Logger {
	mock := &Logger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Logger is an autogenerated mock type for the Logger type
type Logger struct {
	mock.Mock
}

type Logger_Expecter struct {
	mock *mock.Mock
}

func (_m *Logger) EXPECT() *Logger_Expecter {
	return &Logger_Expecter{mock: &_m.Mock}
}

// Log provides a mock function for the type Logger
func (_mock *Logger) Log(args ...any) {
	if len(args) > 0 {
		_mock.Called(args)
	} else {
		_mock.Called()
	}

	return
}

// Logger_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type Logger_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//   - args ...any
func (_e *Logger_Expecter) Log(args ...interface{}) *Logger_Log_Call {
	return &Logger_Log_Call{Call: _e.mock.On("Log",
		append([]interface{}{}, args...)...)}
}

func (_c *Logger_Log_Call) Run(run func(args ...any)) *Logger_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []any
		var variadicArgs []any
		if len(args) > 0 {
			variadicArgs = args[0].([]any)
		}
		arg0 = variadicArgs
		run(
			arg0...,
		)
	})
	return _c
}

func (_c *Logger_Log_Call) Return() *Logger_Log_Call {
	_c.Call.Return()
	return _c
}

func (_c *Logger_Log_Call) RunAndReturn(run func(args ...any)) *Logger_Log_Call {
	_c.Run(run)
	return _c
}
