// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fake

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/sqs"
	mock "github.com/stretchr/testify/mock"
)

// NewSQSClient creates a new instance of SQSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQSClient {
	mock := &SQSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SQSClient is an autogenerated mock type for the SQSClient type
type SQSClient struct {
	mock.Mock
}

type SQSClient_Expecter struct {
	mock *mock.Mock
}

func (_m *SQSClient) EXPECT() *SQSClient_Expecter {
	return &SQSClient_Expecter{mock: &_m.Mock}
}

// ChangeMessageVisibility provides a mock function for the type SQSClient
func (_mock *SQSClient) ChangeMessageVisibility(ctx context.Context, params *sqs.ChangeMessageVisibilityInput, optFns ...func(*sqs.Options)) (*sqs.ChangeMessageVisibilityOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ChangeMessageVisibility")
	}

	var r0 *sqs.ChangeMessageVisibilityOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) (*sqs.ChangeMessageVisibilityOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) *sqs.ChangeMessageVisibilityOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ChangeMessageVisibilityOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sqs.ChangeMessageVisibilityInput, ...func(*sqs.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SQSClient_ChangeMessageVisibility_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeMessageVisibility'
type SQSClient_ChangeMessageVisibility_Call struct {
	*mock.Call
}

// ChangeMessageVisibility is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sqs.ChangeMessageVisibilityInput
//   - optFns ...func(*sqs.Options)
func (_e *SQSClient_Expecter) ChangeMessageVisibility(ctx interface{}, params interface{}, optFns ...interface{}) *SQSClient_ChangeMessageVisibility_Call {
	return &SQSClient_ChangeMessageVisibility_Call{Call: _e.mock.On("ChangeMessageVisibility",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *SQSClient_ChangeMessageVisibility_Call) Run(run func(ctx context.Context, params *sqs.ChangeMessageVisibilityInput, optFns ...func(*sqs.Options))) *SQSClient_ChangeMessageVisibility_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sqs.ChangeMessageVisibilityInput
		if args[1] != nil {
			arg1 = args[1].(*sqs.ChangeMessageVisibilityInput)
		}
		var arg2 []func(*sqs.Options)
		var variadicArgs []func(*sqs.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*sqs.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *SQSClient_ChangeMessageVisibility_Call) Return(changeMessageVisibilityOutput *sqs.ChangeMessageVisibilityOutput, err error) *SQSClient_ChangeMessageVisibility_Call {
	_c.Call.Return(changeMessageVisibilityOutput, err)
	return _c
}

func (_c *SQSClient_ChangeMessageVisibility_Call) RunAndReturn(run func(ctx context.Context, params *sqs.ChangeMessageVisibilityInput, optFns ...func(*sqs.Options)) (*sqs.ChangeMessageVisibilityOutput, error)) *SQSClient_ChangeMessageVisibility_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMessage provides a mock function for the type SQSClient
func (_mock *SQSClient) DeleteMessage(ctx context.Context, params *sqs.DeleteMessageInput, optFns ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 *sqs.DeleteMessageOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) *sqs.DeleteMessageOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.DeleteMessageOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sqs.DeleteMessageInput, ...func(*sqs.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SQSClient_DeleteMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessage'
type SQSClient_DeleteMessage_Call struct {
	*mock.Call
}

// DeleteMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sqs.DeleteMessageInput
//   - optFns ...func(*sqs.Options)
func (_e *SQSClient_Expecter) DeleteMessage(ctx interface{}, params interface{}, optFns ...interface{}) *SQSClient_DeleteMessage_Call {
	return &SQSClient_DeleteMessage_Call{Call: _e.mock.On("DeleteMessage",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *SQSClient_DeleteMessage_Call) Run(run func(ctx context.Context, params *sqs.DeleteMessageInput, optFns ...func(*sqs.Options))) *SQSClient_DeleteMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sqs.DeleteMessageInput
		if args[1] != nil {
			arg1 = args[1].(*sqs.DeleteMessageInput)
		}
		var arg2 []func(*sqs.Options)
		var variadicArgs []func(*sqs.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*sqs.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *SQSClient_DeleteMessage_Call) Return(deleteMessageOutput *sqs.DeleteMessageOutput, err error) *SQSClient_DeleteMessage_Call {
	_c.Call.Return(deleteMessageOutput, err)
	return _c
}

func (_c *SQSClient_DeleteMessage_Call) RunAndReturn(run func(ctx context.Context, params *sqs.DeleteMessageInput, optFns ...func(*sqs.Options)) (*sqs.DeleteMessageOutput, error)) *SQSClient_DeleteMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetQueueUrl provides a mock function for the type SQSClient
func (_mock *SQSClient) GetQueueUrl(ctx context.Context, params *sqs.GetQueueUrlInput, optFns ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for GetQueueUrl")
	}

	var r0 *sqs.GetQueueUrlOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) *sqs.GetQueueUrlOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.GetQueueUrlOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sqs.GetQueueUrlInput, ...func(*sqs.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SQSClient_GetQueueUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQueueUrl'
type SQSClient_GetQueueUrl_Call struct {
	*mock.Call
}

// GetQueueUrl is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sqs.GetQueueUrlInput
//   - optFns ...func(*sqs.Options)
func (_e *SQSClient_Expecter) GetQueueUrl(ctx interface{}, params interface{}, optFns ...interface{}) *SQSClient_GetQueueUrl_Call {
	return &SQSClient_GetQueueUrl_Call{Call: _e.mock.On("GetQueueUrl",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *SQSClient_GetQueueUrl_Call) Run(run func(ctx context.Context, params *sqs.GetQueueUrlInput, optFns ...func(*sqs.Options))) *SQSClient_GetQueueUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sqs.GetQueueUrlInput
		if args[1] != nil {
			arg1 = args[1].(*sqs.GetQueueUrlInput)
		}
		var arg2 []func(*sqs.Options)
		var variadicArgs []func(*sqs.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*sqs.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *SQSClient_GetQueueUrl_Call) Return(getQueueUrlOutput *sqs.GetQueueUrlOutput, err error) *SQSClient_GetQueueUrl_Call {
	_c.Call.Return(getQueueUrlOutput, err)
	return _c
}

func (_c *SQSClient_GetQueueUrl_Call) RunAndReturn(run func(ctx context.Context, params *sqs.GetQueueUrlInput, optFns ...func(*sqs.Options)) (*sqs.GetQueueUrlOutput, error)) *SQSClient_GetQueueUrl_Call {
	_c.Call.Return(run)
	return _c
}

// ReceiveMessage provides a mock function for the type SQSClient
func (_mock *SQSClient) ReceiveMessage(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, params, optFns)
	} else {
		tmpRet = _mock.Called(ctx, params)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessage")
	}

	var r0 *sqs.ReceiveMessageOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)); ok {
		return returnFunc(ctx, params, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) *sqs.ReceiveMessageOutput); ok {
		r0 = returnFunc(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqs.ReceiveMessageOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sqs.ReceiveMessageInput, ...func(*sqs.Options)) error); ok {
		r1 = returnFunc(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SQSClient_ReceiveMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReceiveMessage'
type SQSClient_ReceiveMessage_Call struct {
	*mock.Call
}

// ReceiveMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - params *sqs.ReceiveMessageInput
//   - optFns ...func(*sqs.Options)
func (_e *SQSClient_Expecter) ReceiveMessage(ctx interface{}, params interface{}, optFns ...interface{}) *SQSClient_ReceiveMessage_Call {
	return &SQSClient_ReceiveMessage_Call{Call: _e.mock.On("ReceiveMessage",
		append([]interface{}{ctx, params}, optFns...)...)}
}

func (_c *SQSClient_ReceiveMessage_Call) Run(run func(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options))) *SQSClient_ReceiveMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sqs.ReceiveMessageInput
		if args[1] != nil {
			arg1 = args[1].(*sqs.ReceiveMessageInput)
		}
		var arg2 []func(*sqs.Options)
		var variadicArgs []func(*sqs.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*sqs.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *SQSClient_ReceiveMessage_Call) Return(receiveMessageOutput *sqs.ReceiveMessageOutput, err error) *SQSClient_ReceiveMessage_Call {
	_c.Call.Return(receiveMessageOutput, err)
	return _c
}

func (_c *SQSClient_ReceiveMessage_Call) RunAndReturn(run func(ctx context.Context, params *sqs.ReceiveMessageInput, optFns ...func(*sqs.Options)) (*sqs.ReceiveMessageOutput, error)) *SQSClient_ReceiveMessage_Call {
	_c.Call.Return(run)
	return _c
}
