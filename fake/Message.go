// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fake

import (
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMessage creates a new instance of Message. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Message {
	mock := &Message{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Message is an autogenerated mock type for the Message type
type Message struct {
	mock.Mock
}

type Message_Expecter struct {
	mock *mock.Mock
}

func (_m *Message) EXPECT() *Message_Expecter {
	return &Message_Expecter{mock: &_m.Mock}
}

// Attribute provides a mock function for the type Message
func (_mock *Message) Attribute(key string) string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Attribute")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Message_Attribute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attribute'
type Message_Attribute_Call struct {
	*mock.Call
}

// Attribute is a helper method to define mock.On call
//   - key string
func (_e *Message_Expecter) Attribute(key interface{}) *Message_Attribute_Call {
	return &Message_Attribute_Call{Call: _e.mock.On("Attribute", key)}
}

func (_c *Message_Attribute_Call) Run(run func(key string)) *Message_Attribute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Message_Attribute_Call) Return(s string) *Message_Attribute_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Message_Attribute_Call) RunAndReturn(run func(key string) string) *Message_Attribute_Call {
	_c.Call.Return(run)
	return _c
}

// Attributes provides a mock function for the type Message
func (_mock *Message) Attributes() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Attributes")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// Message_Attributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Attributes'
type Message_Attributes_Call struct {
	*mock.Call
}

// Attributes is a helper method to define mock.On call
func (_e *Message_Expecter) Attributes() *Message_Attributes_Call {
	return &Message_Attributes_Call{Call: _e.mock.On("Attributes")}
}

func (_c *Message_Attributes_Call) Run(run func()) *Message_Attributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Attributes_Call) Return(stringToString map[string]string) *Message_Attributes_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *Message_Attributes_Call) RunAndReturn(run func() map[string]string) *Message_Attributes_Call {
	_c.Call.Return(run)
	return _c
}

// BackedOff provides a mock function for the type Message
func (_mock *Message) BackedOff() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for BackedOff")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// Message_BackedOff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BackedOff'
type Message_BackedOff_Call struct {
	*mock.Call
}

// BackedOff is a helper method to define mock.On call
func (_e *Message_Expecter) BackedOff() *Message_BackedOff_Call {
	return &Message_BackedOff_Call{Call: _e.mock.On("BackedOff")}
}

func (_c *Message_BackedOff_Call) Run(run func()) *Message_BackedOff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_BackedOff_Call) Return(b bool) *Message_BackedOff_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *Message_BackedOff_Call) RunAndReturn(run func() bool) *Message_BackedOff_Call {
	_c.Call.Return(run)
	return _c
}

// Backoff provides a mock function for the type Message
func (_mock *Message) Backoff(delay time.Duration) {
	_mock.Called(delay)
	return
}

// Message_Backoff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Backoff'
type Message_Backoff_Call struct {
	*mock.Call
}

// Backoff is a helper method to define mock.On call
//   - delay time.Duration
func (_e *Message_Expecter) Backoff(delay interface{}) *Message_Backoff_Call {
	return &Message_Backoff_Call{Call: _e.mock.On("Backoff", delay)}
}

func (_c *Message_Backoff_Call) Run(run func(delay time.Duration)) *Message_Backoff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 time.Duration
		if args[0] != nil {
			arg0 = args[0].(time.Duration)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Message_Backoff_Call) Return() *Message_Backoff_Call {
	_c.Call.Return()
	return _c
}

func (_c *Message_Backoff_Call) RunAndReturn(run func(delay time.Duration)) *Message_Backoff_Call {
	_c.Run(run)
	return _c
}

// Body provides a mock function for the type Message
func (_mock *Message) Body() []byte {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 []byte
	if returnFunc, ok := ret.Get(0).(func() []byte); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	return r0
}

// Message_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type Message_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
func (_e *Message_Expecter) Body() *Message_Body_Call {
	return &Message_Body_Call{Call: _e.mock.On("Body")}
}

func (_c *Message_Body_Call) Run(run func()) *Message_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Body_Call) Return(bytes []byte) *Message_Body_Call {
	_c.Call.Return(bytes)
	return _c
}

func (_c *Message_Body_Call) RunAndReturn(run func() []byte) *Message_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Decode provides a mock function for the type Message
func (_mock *Message) Decode(out interface{}) error {
	ret := _mock.Called(out)

	if len(ret) == 0 {
		panic("no return value specified for Decode")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = returnFunc(out)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Message_Decode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decode'
type Message_Decode_Call struct {
	*mock.Call
}

// Decode is a helper method to define mock.On call
//   - out interface{}
func (_e *Message_Expecter) Decode(out interface{}) *Message_Decode_Call {
	return &Message_Decode_Call{Call: _e.mock.On("Decode", out)}
}

func (_c *Message_Decode_Call) Run(run func(out interface{})) *Message_Decode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 interface{}
		if args[0] != nil {
			arg0 = args[0].(interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Message_Decode_Call) Return(err error) *Message_Decode_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Message_Decode_Call) RunAndReturn(run func(out interface{}) error) *Message_Decode_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeMessage provides a mock function for the type Message
func (_mock *Message) DecodeMessage(out any) error {
	ret := _mock.Called(out)

	if len(ret) == 0 {
		panic("no return value specified for DecodeMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(any) error); ok {
		r0 = returnFunc(out)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Message_DecodeMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeMessage'
type Message_DecodeMessage_Call struct {
	*mock.Call
}

// DecodeMessage is a helper method to define mock.On call
//   - out any
func (_e *Message_Expecter) DecodeMessage(out interface{}) *Message_DecodeMessage_Call {
	return &Message_DecodeMessage_Call{Call: _e.mock.On("DecodeMessage", out)}
}

func (_c *Message_DecodeMessage_Call) Run(run func(out any)) *Message_DecodeMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 any
		if args[0] != nil {
			arg0 = args[0].(any)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Message_DecodeMessage_Call) Return(err error) *Message_DecodeMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Message_DecodeMessage_Call) RunAndReturn(run func(out any) error) *Message_DecodeMessage_Call {
	_c.Call.Return(run)
	return _c
}

// Dispatch provides a mock function for the type Message
func (_mock *Message) Dispatch() {
	_mock.Called()
	return
}

// Message_Dispatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dispatch'
type Message_Dispatch_Call struct {
	*mock.Call
}

// Dispatch is a helper method to define mock.On call
func (_e *Message_Expecter) Dispatch() *Message_Dispatch_Call {
	return &Message_Dispatch_Call{Call: _e.mock.On("Dispatch")}
}

func (_c *Message_Dispatch_Call) Run(run func()) *Message_Dispatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Dispatch_Call) Return() *Message_Dispatch_Call {
	_c.Call.Return()
	return _c
}

func (_c *Message_Dispatch_Call) RunAndReturn(run func()) *Message_Dispatch_Call {
	_c.Run(run)
	return _c
}

// Identifier provides a mock function for the type Message
func (_mock *Message) Identifier() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Identifier")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Message_Identifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identifier'
type Message_Identifier_Call struct {
	*mock.Call
}

// Identifier is a helper method to define mock.On call
func (_e *Message_Expecter) Identifier() *Message_Identifier_Call {
	return &Message_Identifier_Call{Call: _e.mock.On("Identifier")}
}

func (_c *Message_Identifier_Call) Run(run func()) *Message_Identifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Identifier_Call) Return(s string) *Message_Identifier_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Message_Identifier_Call) RunAndReturn(run func() string) *Message_Identifier_Call {
	_c.Call.Return(run)
	return _c
}

// Message provides a mock function for the type Message
func (_mock *Message) Message() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Message")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Message_Message_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Message'
type Message_Message_Call struct {
	*mock.Call
}

// Message is a helper method to define mock.On call
func (_e *Message_Expecter) Message() *Message_Message_Call {
	return &Message_Message_Call{Call: _e.mock.On("Message")}
}

func (_c *Message_Message_Call) Run(run func()) *Message_Message_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Message_Call) Return(s string) *Message_Message_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Message_Message_Call) RunAndReturn(run func() string) *Message_Message_Call {
	_c.Call.Return(run)
	return _c
}

// Metadata provides a mock function for the type Message
func (_mock *Message) Metadata() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// Message_Metadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Metadata'
type Message_Metadata_Call struct {
	*mock.Call
}

// Metadata is a helper method to define mock.On call
func (_e *Message_Expecter) Metadata() *Message_Metadata_Call {
	return &Message_Metadata_Call{Call: _e.mock.On("Metadata")}
}

func (_c *Message_Metadata_Call) Run(run func()) *Message_Metadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_Metadata_Call) Return(stringToString map[string]string) *Message_Metadata_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *Message_Metadata_Call) RunAndReturn(run func() map[string]string) *Message_Metadata_Call {
	_c.Call.Return(run)
	return _c
}

// SystemAttributeByKey provides a mock function for the type Message
func (_mock *Message) SystemAttributeByKey(key string) string {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for SystemAttributeByKey")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Message_SystemAttributeByKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SystemAttributeByKey'
type Message_SystemAttributeByKey_Call struct {
	*mock.Call
}

// SystemAttributeByKey is a helper method to define mock.On call
//   - key string
func (_e *Message_Expecter) SystemAttributeByKey(key interface{}) *Message_SystemAttributeByKey_Call {
	return &Message_SystemAttributeByKey_Call{Call: _e.mock.On("SystemAttributeByKey", key)}
}

func (_c *Message_SystemAttributeByKey_Call) Run(run func(key string)) *Message_SystemAttributeByKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Message_SystemAttributeByKey_Call) Return(s string) *Message_SystemAttributeByKey_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Message_SystemAttributeByKey_Call) RunAndReturn(run func(key string) string) *Message_SystemAttributeByKey_Call {
	_c.Call.Return(run)
	return _c
}

// SystemAttributes provides a mock function for the type Message
func (_mock *Message) SystemAttributes() map[string]string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SystemAttributes")
	}

	var r0 map[string]string
	if returnFunc, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}
	return r0
}

// Message_SystemAttributes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SystemAttributes'
type Message_SystemAttributes_Call struct {
	*mock.Call
}

// SystemAttributes is a helper method to define mock.On call
func (_e *Message_Expecter) SystemAttributes() *Message_SystemAttributes_Call {
	return &Message_SystemAttributes_Call{Call: _e.mock.On("SystemAttributes")}
}

func (_c *Message_SystemAttributes_Call) Run(run func()) *Message_SystemAttributes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_SystemAttributes_Call) Return(stringToString map[string]string) *Message_SystemAttributes_Call {
	_c.Call.Return(stringToString)
	return _c
}

func (_c *Message_SystemAttributes_Call) RunAndReturn(run func() map[string]string) *Message_SystemAttributes_Call {
	_c.Call.Return(run)
	return _c
}

// TimeStamp provides a mock function for the type Message
func (_mock *Message) TimeStamp() time.Time {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TimeStamp")
	}

	var r0 time.Time
	if returnFunc, ok := ret.Get(0).(func() time.Time); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	return r0
}

// Message_TimeStamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeStamp'
type Message_TimeStamp_Call struct {
	*mock.Call
}

// TimeStamp is a helper method to define mock.On call
func (_e *Message_Expecter) TimeStamp() *Message_TimeStamp_Call {
	return &Message_TimeStamp_Call{Call: _e.mock.On("TimeStamp")}
}

func (_c *Message_TimeStamp_Call) Run(run func()) *Message_TimeStamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Message_TimeStamp_Call) Return(time1 time.Time) *Message_TimeStamp_Call {
	_c.Call.Return(time1)
	return _c
}

func (_c *Message_TimeStamp_Call) RunAndReturn(run func() time.Time) *Message_TimeStamp_Call {
	_c.Call.Return(run)
	return _c
}
