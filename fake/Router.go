// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package fake

import (
	"context"

	mock "github.com/stretchr/testify/mock"

	loafergo "github.com/justcodes/loafer-go/v2"
)

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

type Router_Expecter struct {
	mock *mock.Mock
}

func (_m *Router) EXPECT() *Router_Expecter {
	return &Router_Expecter{mock: &_m.Mock}
}

// Commit provides a mock function for the type Router
func (_mock *Router) Commit(ctx context.Context, m loafergo.Message) error {
	ret := _mock.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, loafergo.Message) error); ok {
		r0 = returnFunc(ctx, m)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Router_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type Router_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - m loafergo.Message
func (_e *Router_Expecter) Commit(ctx interface{}, m interface{}) *Router_Commit_Call {
	return &Router_Commit_Call{Call: _e.mock.On("Commit", ctx, m)}
}

func (_c *Router_Commit_Call) Run(run func(ctx context.Context, m loafergo.Message)) *Router_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 loafergo.Message
		if args[1] != nil {
			arg1 = args[1].(loafergo.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Router_Commit_Call) Return(err error) *Router_Commit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Router_Commit_Call) RunAndReturn(run func(ctx context.Context, m loafergo.Message) error) *Router_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Configure provides a mock function for the type Router
func (_mock *Router) Configure(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Router_Configure_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Configure'
type Router_Configure_Call struct {
	*mock.Call
}

// Configure is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Router_Expecter) Configure(ctx interface{}) *Router_Configure_Call {
	return &Router_Configure_Call{Call: _e.mock.On("Configure", ctx)}
}

func (_c *Router_Configure_Call) Run(run func(ctx context.Context)) *Router_Configure_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Router_Configure_Call) Return(err error) *Router_Configure_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Router_Configure_Call) RunAndReturn(run func(ctx context.Context) error) *Router_Configure_Call {
	_c.Call.Return(run)
	return _c
}

// CustomGroupFields provides a mock function for the type Router
func (_mock *Router) CustomGroupFields(ctx context.Context) []string {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CustomGroupFields")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// Router_CustomGroupFields_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CustomGroupFields'
type Router_CustomGroupFields_Call struct {
	*mock.Call
}

// CustomGroupFields is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Router_Expecter) CustomGroupFields(ctx interface{}) *Router_CustomGroupFields_Call {
	return &Router_CustomGroupFields_Call{Call: _e.mock.On("CustomGroupFields", ctx)}
}

func (_c *Router_CustomGroupFields_Call) Run(run func(ctx context.Context)) *Router_CustomGroupFields_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Router_CustomGroupFields_Call) Return(strings []string) *Router_CustomGroupFields_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *Router_CustomGroupFields_Call) RunAndReturn(run func(ctx context.Context) []string) *Router_CustomGroupFields_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function for the type Router
func (_mock *Router) GetMessages(ctx context.Context, logger loafergo.Logger) ([]loafergo.Message, error) {
	ret := _mock.Called(ctx, logger)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []loafergo.Message
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, loafergo.Logger) ([]loafergo.Message, error)); ok {
		return returnFunc(ctx, logger)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, loafergo.Logger) []loafergo.Message); ok {
		r0 = returnFunc(ctx, logger)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loafergo.Message)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, loafergo.Logger) error); ok {
		r1 = returnFunc(ctx, logger)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Router_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type Router_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - ctx context.Context
//   - logger loafergo.Logger
func (_e *Router_Expecter) GetMessages(ctx interface{}, logger interface{}) *Router_GetMessages_Call {
	return &Router_GetMessages_Call{Call: _e.mock.On("GetMessages", ctx, logger)}
}

func (_c *Router_GetMessages_Call) Run(run func(ctx context.Context, logger loafergo.Logger)) *Router_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 loafergo.Logger
		if args[1] != nil {
			arg1 = args[1].(loafergo.Logger)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Router_GetMessages_Call) Return(messages []loafergo.Message, err error) *Router_GetMessages_Call {
	_c.Call.Return(messages, err)
	return _c
}

func (_c *Router_GetMessages_Call) RunAndReturn(run func(ctx context.Context, logger loafergo.Logger) ([]loafergo.Message, error)) *Router_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// HandlerMessage provides a mock function for the type Router
func (_mock *Router) HandlerMessage(ctx context.Context, msg loafergo.Message) error {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for HandlerMessage")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, loafergo.Message) error); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// Router_HandlerMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandlerMessage'
type Router_HandlerMessage_Call struct {
	*mock.Call
}

// HandlerMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - msg loafergo.Message
func (_e *Router_Expecter) HandlerMessage(ctx interface{}, msg interface{}) *Router_HandlerMessage_Call {
	return &Router_HandlerMessage_Call{Call: _e.mock.On("HandlerMessage", ctx, msg)}
}

func (_c *Router_HandlerMessage_Call) Run(run func(ctx context.Context, msg loafergo.Message)) *Router_HandlerMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 loafergo.Message
		if args[1] != nil {
			arg1 = args[1].(loafergo.Message)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *Router_HandlerMessage_Call) Return(err error) *Router_HandlerMessage_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *Router_HandlerMessage_Call) RunAndReturn(run func(ctx context.Context, msg loafergo.Message) error) *Router_HandlerMessage_Call {
	_c.Call.Return(run)
	return _c
}

// RunMode provides a mock function for the type Router
func (_mock *Router) RunMode(ctx context.Context) loafergo.Mode {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunMode")
	}

	var r0 loafergo.Mode
	if returnFunc, ok := ret.Get(0).(func(context.Context) loafergo.Mode); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(loafergo.Mode)
	}
	return r0
}

// Router_RunMode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunMode'
type Router_RunMode_Call struct {
	*mock.Call
}

// RunMode is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Router_Expecter) RunMode(ctx interface{}) *Router_RunMode_Call {
	return &Router_RunMode_Call{Call: _e.mock.On("RunMode", ctx)}
}

func (_c *Router_RunMode_Call) Run(run func(ctx context.Context)) *Router_RunMode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Router_RunMode_Call) Return(mode loafergo.Mode) *Router_RunMode_Call {
	_c.Call.Return(mode)
	return _c
}

func (_c *Router_RunMode_Call) RunAndReturn(run func(ctx context.Context) loafergo.Mode) *Router_RunMode_Call {
	_c.Call.Return(run)
	return _c
}

// VisibilityTimeout provides a mock function for the type Router
func (_mock *Router) VisibilityTimeout(ctx context.Context) int32 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VisibilityTimeout")
	}

	var r0 int32
	if returnFunc, ok := ret.Get(0).(func(context.Context) int32); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int32)
	}
	return r0
}

// Router_VisibilityTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VisibilityTimeout'
type Router_VisibilityTimeout_Call struct {
	*mock.Call
}

// VisibilityTimeout is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Router_Expecter) VisibilityTimeout(ctx interface{}) *Router_VisibilityTimeout_Call {
	return &Router_VisibilityTimeout_Call{Call: _e.mock.On("VisibilityTimeout", ctx)}
}

func (_c *Router_VisibilityTimeout_Call) Run(run func(ctx context.Context)) *Router_VisibilityTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Router_VisibilityTimeout_Call) Return(n int32) *Router_VisibilityTimeout_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Router_VisibilityTimeout_Call) RunAndReturn(run func(ctx context.Context) int32) *Router_VisibilityTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// WorkerPoolSize provides a mock function for the type Router
func (_mock *Router) WorkerPoolSize(ctx context.Context) int32 {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WorkerPoolSize")
	}

	var r0 int32
	if returnFunc, ok := ret.Get(0).(func(context.Context) int32); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(int32)
	}
	return r0
}

// Router_WorkerPoolSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WorkerPoolSize'
type Router_WorkerPoolSize_Call struct {
	*mock.Call
}

// WorkerPoolSize is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Router_Expecter) WorkerPoolSize(ctx interface{}) *Router_WorkerPoolSize_Call {
	return &Router_WorkerPoolSize_Call{Call: _e.mock.On("WorkerPoolSize", ctx)}
}

func (_c *Router_WorkerPoolSize_Call) Run(run func(ctx context.Context)) *Router_WorkerPoolSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Router_WorkerPoolSize_Call) Return(n int32) *Router_WorkerPoolSize_Call {
	_c.Call.Return(n)
	return _c
}

func (_c *Router_WorkerPoolSize_Call) RunAndReturn(run func(ctx context.Context) int32) *Router_WorkerPoolSize_Call {
	_c.Call.Return(run)
	return _c
}
