// Code generated by mockery v2.52.2. DO NOT EDIT.

package fake

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	loafergo "github.com/justcodes/loafer-go/v2"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// Commit provides a mock function with given fields: ctx, m
func (_m *Router) Commit(ctx context.Context, m loafergo.Message) error {
	ret := _m.Called(ctx, m)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, loafergo.Message) error); ok {
		r0 = rf(ctx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Configure provides a mock function with given fields: ctx
func (_m *Router) Configure(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Configure")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomGroupFields provides a mock function with given fields: ctx
func (_m *Router) CustomGroupFields(ctx context.Context) []string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CustomGroupFields")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetMessages provides a mock function with given fields: ctx
func (_m *Router) GetMessages(ctx context.Context) ([]loafergo.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []loafergo.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]loafergo.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []loafergo.Message); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]loafergo.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerMessage provides a mock function with given fields: ctx, msg
func (_m *Router) HandlerMessage(ctx context.Context, msg loafergo.Message) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for HandlerMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, loafergo.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunMode provides a mock function with given fields: ctx
func (_m *Router) RunMode(ctx context.Context) loafergo.Mode {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunMode")
	}

	var r0 loafergo.Mode
	if rf, ok := ret.Get(0).(func(context.Context) loafergo.Mode); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(loafergo.Mode)
	}

	return r0
}

// VisibilityTimeout provides a mock function with given fields: ctx
func (_m *Router) VisibilityTimeout(ctx context.Context) int32 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VisibilityTimeout")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context) int32); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// WorkerPoolSize provides a mock function with given fields: ctx
func (_m *Router) WorkerPoolSize(ctx context.Context) int32 {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WorkerPoolSize")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func(context.Context) int32); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
